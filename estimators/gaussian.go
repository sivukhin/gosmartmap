package estimators

import (
	"math"
	"sync/atomic"
)

type GaussianEstimator struct {
	AllowedMemoryGrowthPercentage int
}

func (g GaussianEstimator) Size() int { return 3 }
func (g GaussianEstimator) Init(Hint) {}

func (g GaussianEstimator) Add(hint Hint, size uint32) {
	for {
		old := math.Float64frombits(atomic.LoadUint64(&hint[0]))
		if atomic.CompareAndSwapUint64(&hint[0], math.Float64bits(old), math.Float64bits(old+1)) {
			break
		}
	}
	for {
		old := math.Float64frombits(atomic.LoadUint64(&hint[1]))
		if atomic.CompareAndSwapUint64(&hint[1], math.Float64bits(old), math.Float64bits(old+float64(size))) {
			break
		}
	}
	for {
		old := math.Float64frombits(atomic.LoadUint64(&hint[2]))
		if atomic.CompareAndSwapUint64(&hint[2], math.Float64bits(old), math.Float64bits(old+float64(size)*float64(size))) {
			break
		}
	}
}

func (g GaussianEstimator) Estimate(hint Hint) uint32 {
	count := math.Float64frombits(hint[0])
	if count < 10 {
		return 0
	}
	mean := math.Float64frombits(hint[1]) / count
	variance := math.Float64frombits(hint[2])/count - mean*mean
	std := math.Sqrt(variance)
	size := int32(mean + std*ppf[g.AllowedMemoryGrowthPercentage-1])
	if size > 0 {
		return uint32(size)
	}
	return 0
}

var _ Estimator = GaussianEstimator{}

// ppf of gaussian distribution with mean=0 and std=1 for all numbers from range (0, 1) with interval 0.01
var ppf = []float64{
	-2.3263478740408408,
	-2.053748910631823,
	-1.880793608151251,
	-1.75068607125217,
	-1.6448536269514729,
	-1.5547735945968535,
	-1.475791028179171,
	-1.4050715603096329,
	-1.3407550336902165,
	-1.2815515655446004,
	-1.2265281200366098,
	-1.1749867920660904,
	-1.1263911290388007,
	-1.0803193408149558,
	-1.0364333894937898,
	-0.994457883209753,
	-0.9541652531461943,
	-0.9153650878428138,
	-0.8778962950512288,
	-0.8416212335729142,
	-0.8064212470182403,
	-0.7721932141886848,
	-0.7388468491852137,
	-0.7063025628400874,
	-0.6744897501960817,
	-0.643345405392917,
	-0.6128129910166272,
	-0.5828415072712162,
	-0.5533847195556727,
	-0.5244005127080409,
	-0.4958503473474533,
	-0.46769879911450823,
	-0.4399131656732338,
	-0.41246312944140473,
	-0.3853204664075676,
	-0.3584587932511936,
	-0.33185334643681663,
	-0.3054807880993974,
	-0.27931903444745415,
	-0.2533471031357997,
	-0.22754497664114934,
	-0.20189347914185074,
	-0.17637416478086135,
	-0.15096921549677725,
	-0.12566134685507402,
	-0.10043372051146975,
	-0.07526986209982976,
	-0.05015358346473353,
	-0.02506890825871106,
	0.0,
	0.02506890825871106,
	0.05015358346473367,
	0.0752698620998299,
	0.10043372051146988,
	0.12566134685507416,
	0.1509692154967774,
	0.1763741647808615,
	0.20189347914185107,
	0.22754497664114934,
	0.2533471031357997,
	0.27931903444745415,
	0.3054807880993974,
	0.33185334643681663,
	0.3584587932511938,
	0.38532046640756773,
	0.41246312944140495,
	0.4399131656732339,
	0.4676987991145084,
	0.49585034734745354,
	0.524400512708041,
	0.5533847195556731,
	0.5828415072712162,
	0.6128129910166272,
	0.643345405392917,
	0.6744897501960817,
	0.7063025628400874,
	0.7388468491852137,
	0.7721932141886848,
	0.8064212470182404,
	0.8416212335729143,
	0.8778962950512289,
	0.9153650878428143,
	0.9541652531461948,
	0.9944578832097535,
	1.0364333894937898,
	1.0803193408149558,
	1.1263911290388007,
	1.1749867920660904,
	1.2265281200366105,
	1.2815515655446004,
	1.3407550336902165,
	1.4050715603096329,
	1.475791028179171,
	1.554773594596854,
	1.6448536269514733,
	1.7506860712521708,
	1.8807936081512509,
	2.0537489106318225,
	2.3263478740408408,
}
